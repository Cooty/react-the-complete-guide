{"version":3,"file":"static/js/912.5ccd87d0.chunk.js","mappings":"4MACA,EAA2B,2BCA3B,EAAuB,6BAAvB,EAAwG,gCAAxG,EAAkJ,gC,oCC2ClJ,EArCuB,SAAH,GAAqC,IAA/BA,EAAc,EAAdA,eAAgBC,EAAO,EAAPA,QAClCC,GAAiBC,EAAAA,EAAAA,UACvB,GAAuCC,EAAAA,EAAAA,GAAQC,EAAAA,IAAvCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQC,EAAK,EAALA,OAE7BC,EAAAA,EAAAA,YAAU,WACM,cAAXF,GAA2BC,GAC5BR,GAEJ,GAAG,CAACO,EAAQC,EAAOR,IAEnB,IAAMU,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAOX,EAAeY,QAAQC,MAEpCT,EAAY,CAACL,QAAAA,EAASe,YAAa,CAAEH,KAAAA,IACvC,EAEA,OACE,kBAAMI,UAAWC,EAAcC,SAAUT,EAAkB,UAE5C,YAAXH,GACG,gBAAKU,UAAU,WAAU,UAAC,SAACG,EAAA,QAAc,MAE1C,MAEJ,iBAAKH,UAAWC,EAAiBC,SAAUT,EAAkB,WAC3D,kBAAOW,QAAQ,UAAS,2BACxB,qBAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKtB,QAEvC,gBAAKe,UAAWC,EAAgB,UAC9B,mBAAQD,UAAU,MAAK,6BAI/B,ECzCA,EAAuB,0BCSvB,EARoB,SAACQ,GACnB,OACE,eAAIR,UAAWC,EAAa,UAC1B,uBAAIO,EAAMZ,QAGhB,ECPA,EAA2B,+BCY3B,EAVqB,SAACY,GACpB,OACE,eAAIR,UAAWC,EAAiB,SAC7BO,EAAMC,SAASC,KAAI,SAACC,GAAO,OAC1B,SAAC,EAAW,CAAkBf,KAAMe,EAAQf,MAA1Be,EAAQN,GAA0B,KAI5D,ECiDA,EAlDiB,WACf,OAA8CO,EAAAA,EAAAA,WAAS,GAAM,eAAtDC,EAAe,KAAEC,EAAkB,KAClCT,GAAOU,EAAAA,EAAAA,MAAPV,GACR,GAAsClB,EAAAA,EAAAA,GAAQ6B,EAAAA,IAAtC3B,EAAW,EAAXA,YAAa4B,EAAI,EAAJA,KAAM3B,EAAM,EAANA,QAM3BE,EAAAA,EAAAA,YAAU,WACRH,EAAYgB,EACd,GAAG,CAACA,EAAIhB,IAER,IAKIoB,EALES,GAAsBC,EAAAA,EAAAA,cAAY,WACtCL,GAAmB,GACnBzB,EAAYgB,EACd,GAAG,CAACA,EAAIhB,IAoBR,MAhBc,YAAXC,IACDmB,GACE,gBAAKT,UAAU,WAAU,UACvB,SAACG,EAAA,QAAc,OAKP,cAAXb,GAA2B2B,GAAQA,EAAKG,OAAS,IAClDX,GAAW,SAAC,EAAY,CAACA,SAAUQ,KAGvB,cAAX3B,GAA4B2B,GAAwB,IAAhBA,EAAKG,SAC1CX,GAAW,cAAGT,UAAU,WAAU,kCAIlC,qBAASA,UAAWC,EAAiB,WACnC,2CACEY,IACA,mBAAQb,UAAU,MAAMqB,QAnCC,WAC7BP,GAAmB,EACrB,EAiC8D,2BAIzDD,IAAmB,SAAC,EAAc,CAAC7B,QAASqB,EAAItB,eAAgBmC,IAChET,IAGP,C","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef, useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = ({ onAddedComment, quoteId }) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const text = commentTextRef.current.value;\n\n    sendRequest({quoteId, commentData: { text } });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {\n        status === 'pending' ?\n          (<div className=\"centered\"><LoadingSpinner /></div>)\n            :\n          null\n      }\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { id } = useParams();\n  const { sendRequest, data, status } = useHttp(getAllComments);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  useEffect(() => {\n    sendRequest(id);\n  }, [id, sendRequest]);\n\n  const addedCommentHandler = useCallback(() => {\n    setIsAddingComment(false);\n    sendRequest(id);\n  }, [id, sendRequest])\n\n  let comments;\n\n  if(status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if(status === 'completed' && (data && data.length > 0)) {\n    comments = <CommentsList comments={data} />\n  }\n\n  if(status === 'completed' && (!data || data.length === 0)) {\n    comments = <p className=\"centered\">No comments yet...</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={id} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"names":["onAddedComment","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","submitFormHandler","event","preventDefault","text","current","value","commentData","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","props","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","data","addedCommentHandler","useCallback","length","onClick"],"sourceRoot":""}